@startuml PandemicGame
left to right direction
skinparam classAttributeIconSize 0

' ENUMS
enum CorDoenca {
  AZUL
  AMARELO
  PRETO
  VERMELHO
}

enum StatusPartida {
  EM_ANDAMENTO
  VITORIA
  DERROTA_SURTOS
  DERROTA_DOENCA
  DERROTA_TEMPO
}

enum FaseTurno {
  ACOES
  COMPRA
  INFECCAO
}

enum TipoCartaJogador {
  CIDADE
  EVENTO
  EPIDEMIA
}

' INTERFACE DO STRATEGY
interface IHabilidadeEspecial {
  + executar(jogador: Jogador, partida: Partida): void
}

class HabilidadeMedico
class HabilidadePesquisadora
class HabilidadeCientista
class HabilidadeOperacoes

IHabilidadeEspecial <|.. HabilidadeMedico
IHabilidadeEspecial <|.. HabilidadePesquisadora
IHabilidadeEspecial <|.. HabilidadeCientista
IHabilidadeEspecial <|.. HabilidadeOperacoes

' CLASSES BASE
class Partida {
  - status: StatusPartida
  - jogadores: List<Jogador>
  - turnoAtual: Turno
  - tabuleiro: Tabuleiro
  + iniciar()
  + verificarCondicoes(): StatusPartida
}

class Turno {
  - jogadorAtual: Jogador
  - faseAtual: FaseTurno
  - acoesRestantes: int
  + verificarAcoesRestantes(): int
  + decrementarAcoes()
  + proximaFase()
}

class Tabuleiro {
  - cidades: List<Cidade>
  - taxaInfeccao: int
  - marcadorSurtos: int
  - curas: Map<CorDoenca, boolean>
  - pontoControle1: string
  - pontoControle2: string
  + espalharDoenca()
  + aplicarSurto()
  + obterCidadeAtual(jogador: Jogador): Cidade
  + moverJogador(jogador: Jogador, destino: Cidade)
  + tratarDoenca(jogador: Jogador)
  + construirBase(jogador: Jogador)
}

class Cidade {
  - nome: string
  - cor: CorDoenca
  - cubosDoenca: Map<CorDoenca, int>
  - conexoesSaida: List<Cidade>
  - temBase: boolean
  + adicionarCubo(cor: CorDoenca)
  + removerCubo(cor: CorDoenca)
  + adicionarConexao(destino: Cidade)
  + temConexaoPara(destino: Cidade): boolean
  + obterConexoes(): List<Cidade>
}

' JOGADOR E PERSONAGEM UTILIZANDO STRATEGY
class Jogador {
  - personagem: Personagem
  - mao: List<CartaJogador>
  - localizacao: Cidade
  + realizarAcao(acao: string, destino: Cidade)
  + atualizarLocalizacao(destino: Cidade)
  + compartilharCarta(dest: Jogador, carta: CartaJogador)
  + construirBase()
}

abstract class Personagem {
  + nome: string
  - habilidade: IHabilidadeEspecial
  + usarHabilidade(jogador: Jogador, partida: Partida)
}

Personagem --> IHabilidadeEspecial

class Medico
class Pesquisadora
class Cientista
class EspecialistaOperacoes

Personagem <|-- Medico
Personagem <|-- Pesquisadora
Personagem <|-- Cientista
Personagem <|-- EspecialistaOperacoes

' CARTAS
abstract class Carta

class CartaJogador {
  - tipo: TipoCartaJogador
  - cidade: Cidade
}

class CartaInfeccao {
  - cidade: Cidade
  - cor: CorDoenca
}

class CartaEvento {
  - descricao: string
  + ativar()
}

class CartaEpidemia {
  + ativarEpidemia()
}

Carta <|-- CartaJogador
Carta <|-- CartaInfeccao
CartaJogador <|-- CartaEvento
CartaJogador <|-- CartaEpidemia

' BARALHO GENÉRICO COM BIND
class "Baralho<T>" as BaralhoGenerico {
  - cartas: Stack<T>
  + embaralhar()
  + sacar(): T
  + descartar(carta: T)
}

' CLASSES BOUND COM TIPOS ESPECÍFICOS
class "Baralho<CartaJogador>" as BaralhoJogador {
  - cartas: Stack<CartaJogador>
  + embaralhar()
  + sacar(): CartaJogador
  + descartar(carta: CartaJogador)
}

class "Baralho<CartaInfeccao>" as BaralhoInfeccao {
  - cartas: Stack<CartaInfeccao>
  + embaralhar()
  + sacar(): CartaInfeccao
  + descartar(carta: CartaInfeccao)
}

' BIND RELATIONSHIPS
BaralhoGenerico <|-- BaralhoJogador : <<bind>> (T -> CartaJogador)
BaralhoGenerico <|-- BaralhoInfeccao : <<bind>> (T -> CartaInfeccao)

class GerenciadorDescarte {
  - descarteJogador: BaralhoJogador
  - descarteInfeccao: BaralhoInfeccao
  + descartarJogador(carta: CartaJogador)
  + descartarInfeccao(carta: CartaInfeccao)
  + obterDescarteJogador(): BaralhoJogador
  + obterDescarteInfeccao(): BaralhoInfeccao
}

' RELAÇÕES COM CARDINALIDADES UML PADRÃO
Partida o-- Tabuleiro
Partida o-- "2..4" Jogador
Partida o-- Turno
Partida --> StatusPartida
Partida o-- GerenciadorDescarte

Turno --> Jogador
Turno --> FaseTurno

Tabuleiro o-- "0..*" Cidade
Tabuleiro -- BaralhoJogador
Tabuleiro -- BaralhoInfeccao

' CONEXÕES ASSIMÉTRICAS ENTRE CIDADES (GRAFO DIRECIONADO)
Cidade --> "0..*" Cidade : conexoesSaida

Cidade --> CorDoenca

Jogador --> Personagem
Jogador --> Cidade
Jogador --> "0..7" CartaJogador

CartaInfeccao --> Cidade
CartaInfeccao --> CorDoenca

CartaJogador --> Cidade
CartaJogador --> TipoCartaJogador

BaralhoJogador *-- "0..*" CartaJogador : cartas
BaralhoInfeccao *-- "0..*" CartaInfeccao : cartas

@enduml